import * as actions from '../common/actions.js';
import * as keyboards from '../common/inlineKeyboards.js';
import CostController from '../controllers/CostController.js';
import costModelToObject from '../common/utils.js';
import CostDTO from '../models/dto/Cost.dto.js';
import CancelScene from '../scenes/cancel.scene.js';

export default class DeleteCostCommand {
  bot;
  idToDel;

  constructor(bot) {
    this.bot = bot;
  }

  handle() {
    this.bot.action(new RegExp(actions.DEL), async (ctx) => {
      const match = new RegExp(`${actions.DEL}(\\d+)`).exec(
        ctx.callbackQuery.data
      );
      if (!match) {
        ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üëÄ');
        return;
      }

      [, this.idToDel] = match;
      const cost = await CostController.getById(this.idToDel);

      if (!cost) {
        ctx.reply('–†–∞—Å—Ö–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω...');
        return;
      }

      costModelToObject(cost);
      ctx.replyWithHTML(
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?\n<i>(${CostDTO.category}) ${CostDTO.subject}</i>`,
        keyboards.yesNoCancel()
      );
    });

    this.bot.action(actions.YES, async (ctx) => {
      await CostController.delById(this.idToDel);
      ctx.replyWithHTML('–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!‚ùå');
    });

    this.bot.action(actions.NO, (ctx) => {
      return new CancelScene().start(ctx);
    });

    this.bot.action(actions.CANCEL, (ctx) => {
      return new CancelScene().start(ctx);
    });
  }
}

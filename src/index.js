import './loadEnv.js'
import { Telegraf, Scenes, session, Markup } from 'telegraf';
import { telbitScenes } from './scenes/index.js';
import * as scenes from './scenes/common/scenes.js';
import * as actions from './scenes/common/actions.js';
import * as db from './db.js';
import { CategoryController } from './controllers/categoryController.js';
import { CostController } from './controllers/costController.js';
import { Cost } from './scenes/addCost.js';
import * as buttons from './scenes/common/buttons.js';
import { costModelToObject } from './scenes/common/utils.js';

let idToDel = 0;
const accessDenied = '–≠—Ç–æ —á–∞—Å—Ç–Ω—ã–π –±–æ—Ç, –¥–æ—Å—Ç—É–ø –∏–∑–≤–Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω.'

db.start();

const bot = new Telegraf(process.env.TOKEN);
const stage = new Scenes.Stage(telbitScenes);
bot.use(session());
bot.use(stage.middleware());

bot.hears(/^\b[0-9\,\.]+\b$/i, (ctx) => {
    if (!access(ctx)) return ctx.reply(accessDenied);

    ctx.scene.enter(scenes.ADD_COST);
});

bot.command('sumday', async (ctx) => {
    if (!access(ctx)) return

    const costController = new CostController();
    const sum = await costController.getTodaySum();
    ctx.reply(`–°—É–º–º–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: ${sum}`);
})

bot.command('summonth', async (ctx) => {
    if (!access(ctx)) return

    const costController = new CostController();
    const sum = await costController.getMonthSum();
    ctx.reply(`–°—É–º–º–∞ –∑–∞ –º–µ—Å—è—Ü: ${sum}`);
})

bot.hears(/–ø–æ—Å–ª–µ–¥–Ω–∏[–µ–π]\s*\d*/i, async (ctx) => {
    if (!access(ctx)) return

    ctx.scene.enter(scenes.LAST_COSTS);
});

bot.hears(/–∫–∞—Ç–µ–≥–æ—Ä–∏—è/i, (ctx) => {
    if (!access(ctx)) return

    ctx.scene.enter(scenes.ADD_CATEGORY);
});

bot.hears(/–∫–∞—Ç–µ–≥–æ—Ä–∏–∏/i, async (ctx) => {
    if (!access(ctx)) return

    const categoryController = new CategoryController();

    const categories = await categoryController.getAll();
    const count = categories.length;
    ctx.reply(`–°–µ–π—á–∞—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${count}`);
    ctx.reply(categories.map(c => {
        return c.name;
    }).join('\n'));
});

bot.action(new RegExp(actions.EDIT), async (ctx) => {
    if (!access(ctx)) return

    const match = new RegExp(actions.EDIT + '(\\d+)').exec(ctx.callbackQuery.data);
    if (!match) {
        ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üëÄ")
        return;
    }

    const costController = new CostController();
    const cost = await costController.getById(match[1]);

    if (!cost) {
        ctx.reply("–†–∞—Å—Ö–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω...");
        return;
    }

    costModelToObject(cost, Cost);
    return ctx.scene.enter(scenes.CHANGE_COST);
})

bot.action(new RegExp(actions.DEL), async (ctx) => {
    if (!access(ctx)) return

    const match = new RegExp(actions.DEL + '(\\d+)').exec(ctx.callbackQuery.data);
    if (!match) {
        ctx.reply("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üëÄ")
        return;
    }

    idToDel = match[1];
    const costController = new CostController();
    const cost = await costController.getById(idToDel);

    if (!cost) {
        ctx.reply("–†–∞—Å—Ö–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª–µ–Ω...");
        return;
    }

    costModelToObject(cost);
    ctx.replyWithHTML(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?\n<i>(${Cost.category}) ${Cost.subject}</i>`, Markup.inlineKeyboard([
        buttons.yes(),
        buttons.no(),
    ]))
})

bot.action(actions.YES, async (ctx) => {
    if (!access(ctx)) return

    const costController = new CostController();
    costController.delById(idToDel);
    ctx.replyWithHTML("–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!‚ùå")
    return ctx.scene.leave();
})

bot.action(actions.NO, (ctx) => {
    if (!access(ctx)) return

    return ctx.scene.enter(scenes.CANCEL);
})


bot.launch();

function access(ctx) {
    const users = process.env.USERS.split(',');
    console.log(`${ctx.chat.id} —Å—Ç—É—á–∏—Ç—Å—è`);
    return users.includes(ctx.chat.id.toString());
}